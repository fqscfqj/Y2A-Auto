name: Cleanup old artifacts, releases and images

on:
  workflow_run:
    workflows: ["Docker Image CI/CD"]
    types: [completed]
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  packages: write

env:
  KEEP: 3

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Prepare variables
        env:
          OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "OWNER=${OWNER}" >> $GITHUB_ENV
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          echo "KEEP=${{ env.KEEP }}" >> $GITHUB_ENV

      - name: Delete old GitHub Actions artifacts (keep ${{ env.KEEP }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Cleaning repository artifacts for ${OWNER}/${REPO_NAME}..."
          per_page=100
          page=1
          all_ids=""
          while :; do
            resp=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${OWNER}/${REPO_NAME}/actions/artifacts?per_page=$per_page&page=$page")
            ids=$(echo "$resp" | jq -r '.artifacts[]?.id')
            if [ -z "$ids" ]; then break; fi
            all_ids="$all_ids\n$ids"
            page=$((page+1))
          done

          echo -e "$all_ids" | awk 'NF' | while read id; do
            created_at=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${OWNER}/${REPO_NAME}/actions/artifacts/$id" | jq -r '.created_at')
            echo "$id $created_at"
          done | sort -k2 -r | awk 'NR>${KEEP} {print $1}' | while read del; do
            if [ -n "$del" ]; then
              echo "Deleting artifact id=$del"
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${OWNER}/${REPO_NAME}/actions/artifacts/$del"
            fi
          done || true

      - name: Delete old release assets named Y2A-Auto-win64.zip (keep ${{ env.KEEP }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Cleaning release assets named Y2A-Auto-win64.zip..."
          per_page=100
          page=1
          releases_json=""
          while :; do
            resp=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${OWNER}/${REPO_NAME}/releases?per_page=$per_page&page=$page")
            if [ "$(echo "$resp" | jq 'length')" -eq 0 ]; then break; fi
            releases_json="$releases_json\n$resp"
            page=$((page+1))
          done

          # collect asset ids in release created_at order
          echo "$releases_json" | jq -s 'add | sort_by(.created_at) | reverse | .[] | .assets[]? | select(.name=="Y2A-Auto-win64.zip") | "\(.id) \(.created_at)"' -r | awk 'NR>${KEEP} {print $1}' | while read aid; do
            if [ -n "$aid" ]; then
              echo "Deleting release asset id=$aid"
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${OWNER}/${REPO_NAME}/releases/assets/$aid"
            fi
          done || true

      - name: Delete old GHCR package versions for y2a-auto (keep ${{ env.KEEP }})
        timeout-minutes: 15
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Cleaning GHCR package versions..."
          per_page=100
          page=1
          versions_list=""
          base_url="https://api.github.com/users/${OWNER}/packages/container/y2a-auto/versions"
          TOKEN="$GITHUB_TOKEN"

          while :; do
            url="${base_url}?per_page=$per_page&page=$page"
            resp=$(curl -sS -m 12 -H "Accept: application/vnd.github+json" -H "Authorization: token $TOKEN" "$url" || true)
            rtype=$(echo "$resp" | jq -r 'type' 2>/dev/null || echo "unknown")
            if [ "$rtype" != "array" ]; then
              echo "GHCR list API did not return an array (type=$rtype). Message: $(echo "$resp" | jq -r '.message // empty')"
              break
            fi
            count=$(echo "$resp" | jq 'length')
            if [ "$count" -eq 0 ]; then
              break
            fi
            versions_list="$versions_list\n$resp"
            page=$((page+1))
          done

          # If nothing collected, skip delete
          if [ -z "$(echo -e "$versions_list" | awk 'NF')" ]; then
            echo "No GHCR versions fetched or API not accessible; skipping GHCR cleanup."
            exit 0
          fi

          # Build delete list (skip newest KEEP versions)
          del_ids=$(echo "$versions_list" | jq -r --argjson k "$KEEP" 'add | unique_by(.id) | sort_by(.created_at) | reverse | .[$k:] | .[].id?')
          if [ -z "$(echo "$del_ids" | awk 'NF')" ]; then
            echo "Nothing to delete on GHCR (<= KEEP)."
            exit 0
          fi

          echo "$del_ids" | wc -l | xargs echo "GHCR versions to delete:"
          echo "$del_ids" | xargs -I{} -n1 -P6 sh -c '
            vid="$1"
            echo "Deleting GHCR version id=${vid}"
            code=$(curl -sS -m 12 -o "/tmp/ghcr_${vid}.body" -w "%{http_code}" -X DELETE \
              -H "Accept: application/vnd.github+json" -H "Authorization: token $TOKEN" \
              "https://api.github.com/users/${OWNER}/packages/container/y2a-auto/versions/${vid}" || true)
            echo "[${vid}] HTTP ${code}"
            if [ -s "/tmp/ghcr_${vid}.body" ]; then
              echo "[${vid}] Body:"; head -c 200 "/tmp/ghcr_${vid}.body"; echo
            fi
          ' sh {} || true

      - name: Delete old Docker Hub tags for y2a-auto (keep ${{ env.KEEP }})
        timeout-minutes: 15
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          set -euo pipefail
          if [ -z "${DOCKERHUB_USERNAME}" ] || [ -z "${DOCKERHUB_TOKEN}" ]; then
            echo "DOCKERHUB credentials not available, skipping Docker Hub cleanup. To enable, set secrets.DOCKERHUB_USERNAME and secrets.DOCKERHUB_TOKEN."
            exit 0
          fi

          echo "Cleaning Docker Hub tags..."
          repo=${DOCKERHUB_USERNAME}/y2a-auto
          page=1
          page_size=100
          tags=""
          while :; do
            resp=$(curl -sS -m 12 -u "$DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN" "https://hub.docker.com/v2/repositories/${repo}/tags?page_size=$page_size&page=$page")
            # collect name and last_updated in one go
            lines=$(echo "$resp" | jq -r '.results[]? | select(.name!=null) | "\(.name) \(.last_updated)"')
            if [ -z "$lines" ]; then break; fi
            tags="$tags\n$lines"
            page=$((page+1))
          done

          # Order by last_updated descending and build delete list (skip newest KEEP)
          del_tags=$(echo -e "$tags" | awk 'NF' | sort -k2 -r | awk -v KEEP="$KEEP" '{print $1}' | awk -v KEEP="$KEEP" 'NR>KEEP')
          if [ -z "$(echo "$del_tags" | awk 'NF')" ]; then
            echo "Nothing to delete on Docker Hub (<= KEEP)."
            exit 0
          fi

          echo "$del_tags" | wc -l | xargs echo "Docker Hub tags to delete:" 
          echo "$del_tags" | xargs -I{} -n1 -P6 sh -c '
            tag="$1"
            echo "Deleting Docker Hub tag ${tag}"
            code=$(curl -sS -m 12 -u "$DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN" -w "%{http_code}" -o /tmp/dh_${tag}.body -X DELETE "https://hub.docker.com/v2/repositories/${repo}/tags/${tag}/" || true)
            echo "[${tag}] HTTP ${code}"
            if [ -s "/tmp/dh_${tag}.body" ]; then
              echo "[${tag}] Body:"; head -c 200 "/tmp/dh_${tag}.body"; echo
            fi
          ' sh {} || true
